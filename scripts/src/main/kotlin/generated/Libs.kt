/*
 * Copyright (Change Date see Readme), gematik GmbH
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be approved by the
 * European Commission â€“ subsequent versions of the EUPL (the "Licence").
 * You may not use this work except in compliance with the Licence.
 *
 * You find a copy of the Licence in the "Licence" file or at
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
 * In case of changes by gematik GmbH find details in the "Readme" file.
 *
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *
 * *******
 *
 * For additional notes and disclaimer from gematik and in case of changes by gematik find details in the "Readme" file.
 */

package generated

import org.gradle.api.artifacts.ExternalModuleDependencyBundle
import org.gradle.api.artifacts.MinimalExternalModuleDependency
import org.gradle.api.artifacts.VersionCatalog
import org.gradle.api.provider.Provider

/**
 * This file is auto-generated by the Gradle task `./gradlew :scripts:generateLibsObject`.
 *
 * It provides strongly typed access to libraries and bundles defined in the
 * `libs.versions.toml` version catalog. This enables safe and convenient use of
 * dependencies in custom Gradle script plugins located in the `:scripts` module.
 *
 * Since Gradle precompiled script plugins in `buildSrc` or custom modules cannot
 * use `libs.` directly like in a `build.gradle.kts`, this file acts as a bridge,
 * exposing those references via Kotlin extension properties.
 *
 * Do NOT edit this file manually. Instead, rerun the Gradle task if you make
 * changes to `libs.versions.toml`.
 *
 * Generated on: 2025-07-23T21:08:53.434692
 */
internal val VersionCatalog.accompanistFlowlayoutLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("accompanist-flowlayout")

internal val VersionCatalog.accompanistNavigationMaterialLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("accompanist-navigation-material")

internal val VersionCatalog.accompanistPagerLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("accompanist-pager")

internal val VersionCatalog.accompanistPagerIndicatorsLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("accompanist-pager-indicators")

internal val VersionCatalog.accompanistPermissionLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("accompanist-permission")

internal val VersionCatalog.accompanistSwiperefreshLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("accompanist-swiperefresh")

internal val VersionCatalog.accompanistSystemuicontrollerLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("accompanist-systemuicontroller")

internal val VersionCatalog.androidGradlePluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("android-gradle-plugin")

internal val VersionCatalog.androidxActivityComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-activity-compose")

internal val VersionCatalog.androidxAppcompatLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-appcompat")

internal val VersionCatalog.androidxBiometricLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-biometric")

internal val VersionCatalog.androidxComposeBomLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-compose-bom")

internal val VersionCatalog.androidxCoreKtxLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-core-ktx")

internal val VersionCatalog.androidxDatastorePreferencesLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-datastore-preferences")

internal val VersionCatalog.androidxSecurityCryptoLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-security-crypto")

internal val VersionCatalog.androidxTestArchCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-test-arch-core")

internal val VersionCatalog.androidxTestCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-test-core")

internal val VersionCatalog.androidxTestJunitLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-test-junit")

internal val VersionCatalog.androidxTestOrchestratorLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-test-orchestrator")

internal val VersionCatalog.androidxTestRulesLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-test-rules")

internal val VersionCatalog.androidxTestRunnerLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-test-runner")

internal val VersionCatalog.androidxWebkitLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-webkit")

internal val VersionCatalog.androidxWindowLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-window")

internal val VersionCatalog.androidxWorkLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("androidx-work")

internal val VersionCatalog.barcodeScanningLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("barcode-scanning")

internal val VersionCatalog.bouncycastleBcpkixLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("bouncycastle-bcpkix")

internal val VersionCatalog.bouncycastleBcprovLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("bouncycastle-bcprov")

internal val VersionCatalog.bouncycastleJose4jLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("bouncycastle-jose4j")

internal val VersionCatalog.buildkonfigGradlePluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("buildkonfig-gradle-plugin")

internal val VersionCatalog.cameraCamera2Library: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("camera-camera2")

internal val VersionCatalog.cameraLifecycleLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("camera-lifecycle")

internal val VersionCatalog.cameraViewLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("camera-view")

internal val VersionCatalog.certificatetransparencyAndroidLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("certificatetransparency-android")

internal val VersionCatalog.chuckerLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("chucker")

internal val VersionCatalog.coilComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("coil-compose")

internal val VersionCatalog.coilGifLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("coil-gif")

internal val VersionCatalog.composeAnimationLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-animation")

internal val VersionCatalog.composeCompilerLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-compiler")

internal val VersionCatalog.composeFoundationLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-foundation")

internal val VersionCatalog.composeMarkdownLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-markdown")

internal val VersionCatalog.composeMaterialLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-material")

internal val VersionCatalog.composeMaterialIconsCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-material-icons-core")

internal val VersionCatalog.composeMaterialIconsExtendedLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-material-icons-extended")

internal val VersionCatalog.composeMaterial3Library: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-material3")

internal val VersionCatalog.composePluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-plugin")

internal val VersionCatalog.composeRuntimeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-runtime")

internal val VersionCatalog.composeUiLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-ui")

internal val VersionCatalog.composeUiTestLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-ui-test")

internal val VersionCatalog.composeUiTestJunit4Library: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-ui-test-junit4")

internal val VersionCatalog.composeUiTestManifestLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-ui-test-manifest")

internal val VersionCatalog.composeUiToolingLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-ui-tooling")

internal val VersionCatalog.composeUiToolingPreviewLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("compose-ui-tooling-preview")

internal val VersionCatalog.databaseRealmLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("database-realm")

internal val VersionCatalog.databaseRealmPluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("database-realm-plugin")

internal val VersionCatalog.dependencyCheckGradleLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("dependency-check-gradle")

internal val VersionCatalog.desugarJdkLibsLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("desugar-jdk-libs")

internal val VersionCatalog.diLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("di")

internal val VersionCatalog.diAndroidxLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("di-androidx")

internal val VersionCatalog.diComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("di-compose")

internal val VersionCatalog.diSavedstateLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("di-savedstate")

internal val VersionCatalog.diViewmodelLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("di-viewmodel")

internal val VersionCatalog.gradleLicensePluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("gradle-license-plugin")

internal val VersionCatalog.guavaLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("guava")

internal val VersionCatalog.imageCropperLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("image-cropper")

internal val VersionCatalog.jsonLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("json")

internal val VersionCatalog.kodeonAndroidLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kodeon-android")

internal val VersionCatalog.kodeonCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kodeon-core")

internal val VersionCatalog.kotlinGradlePluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlin-gradle-plugin")

internal val VersionCatalog.kotlinReflectLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlin-reflect")

internal val VersionCatalog.kotlinSerilizationPluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlin-serilization-plugin")

internal val VersionCatalog.kotlinStdlibLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlin-stdlib")

internal val VersionCatalog.kotlinStdlibJdk8Library: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlin-stdlib-jdk8")

internal val VersionCatalog.kotlinTestLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlin-test")

internal val VersionCatalog.kotlinxCoroutinesAndroidLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlinx-coroutines-android")

internal val VersionCatalog.kotlinxCoroutinesCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlinx-coroutines-core")

internal val VersionCatalog.kotlinxCoroutinesPlayServicesLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlinx-coroutines-play-services")

internal val VersionCatalog.kotlinxCoroutinesTestLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlinx-coroutines-test")

internal val VersionCatalog.kotlinxDatetimeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlinx-datetime")

internal val VersionCatalog.kotlinxSerializationCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlinx-serialization-core")

internal val VersionCatalog.kotlinxSerializationJsonLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("kotlinx-serialization-json")

internal val VersionCatalog.ktorNetworkTlsLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("ktor-network-tls")

internal val VersionCatalog.leakCanaryLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("leak-canary")

internal val VersionCatalog.lifecycleProcessLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("lifecycle-process")

internal val VersionCatalog.lifecycleRuntimeComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("lifecycle-runtime-compose")

internal val VersionCatalog.lifecycleViewmodelKtxLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("lifecycle-viewmodel-ktx")

internal val VersionCatalog.loggingNapierLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("logging-napier")

internal val VersionCatalog.loggingSlf4jNopLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("logging-slf4j-nop")

internal val VersionCatalog.lottieLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("lottie")

internal val VersionCatalog.mapsLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("maps")

internal val VersionCatalog.mapsComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("maps-compose")

internal val VersionCatalog.mapsKtxLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("maps-ktx")

internal val VersionCatalog.mapsLocationLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("maps-location")

internal val VersionCatalog.mapsUtilsLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("maps-utils")

internal val VersionCatalog.materialLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("material")

internal val VersionCatalog.multiplatformSettingsLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("multiplatform-settings")

internal val VersionCatalog.navigationComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("navigation-compose")

internal val VersionCatalog.nettyCodecHttp2Library: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("netty-codec-http2")

internal val VersionCatalog.nettyHandlerLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("netty-handler")

internal val VersionCatalog.networkHttpclient5Library: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("network-httpclient5")

internal val VersionCatalog.networkHttpclient5FluentLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("network-httpclient5-fluent")

internal val VersionCatalog.networkOkhttpLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("network-okhttp")

internal val VersionCatalog.networkOkhttpLoggingLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("network-okhttp-logging")

internal val VersionCatalog.networkOkhttpMockwebserverLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("network-okhttp-mockwebserver")

internal val VersionCatalog.networkRetrofitLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("network-retrofit")

internal val VersionCatalog.networkRetrofitKotlinxSerializationConverterLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("network-retrofit-kotlinx-serialization-converter")

internal val VersionCatalog.opencsvLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("opencsv")

internal val VersionCatalog.pagingCommonKtxLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("paging-common-ktx")

internal val VersionCatalog.pagingComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("paging-compose")

internal val VersionCatalog.passwordStrengthLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("password-strength")

internal val VersionCatalog.pdfBoxLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("pdf-box")

internal val VersionCatalog.playAppUpdateLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("play-app-update")

internal val VersionCatalog.playIntergrityLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("play-intergrity")

internal val VersionCatalog.playReviewLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("play-review")

internal val VersionCatalog.primsysClientLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("primsys-client")

internal val VersionCatalog.primsysDataLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("primsys-data")

internal val VersionCatalog.processPhoenixLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("process-phoenix")

internal val VersionCatalog.protobufJavaLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("protobuf-java")

internal val VersionCatalog.protobufJavaUtilLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("protobuf-java-util")

internal val VersionCatalog.qualityComposerulesLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("quality-composerules")

internal val VersionCatalog.qualityDetektLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("quality-detekt")

internal val VersionCatalog.qualityKtlintLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("quality-ktlint")

internal val VersionCatalog.qualityKtlintCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("quality-ktlint-core")

internal val VersionCatalog.qualityKtlintTestLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("quality-ktlint-test")

internal val VersionCatalog.qualityRulesLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("quality-rules")

internal val VersionCatalog.reactiveStateLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("reactive-state")

internal val VersionCatalog.secretsGradlePluginLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("secrets-gradle-plugin")

internal val VersionCatalog.shimmerLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("shimmer")

internal val VersionCatalog.testJunitLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("test-junit")

internal val VersionCatalog.testKotlinTestLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("test-kotlin-test")

internal val VersionCatalog.testKotlinTestCommonLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("test-kotlin-test-common")

internal val VersionCatalog.testMockkLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("test-mockk")

internal val VersionCatalog.testMockkAndroidLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("test-mockk-android")

internal val VersionCatalog.testTurbineLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("test-turbine")

internal val VersionCatalog.testYamlLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("test-yaml")

internal val VersionCatalog.textRecognitionLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("text-recognition")

internal val VersionCatalog.textTranslationLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("text-translation")

internal val VersionCatalog.trackingComposeLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("tracking-compose")

internal val VersionCatalog.trackingLibraryLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("tracking-library")

internal val VersionCatalog.zxingCoreLibrary: Provider<MinimalExternalModuleDependency>
    get() = getLibrary("zxing-core")

internal val VersionCatalog.accompanistBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("accompanist")

internal val VersionCatalog.androidxBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("androidx")

internal val VersionCatalog.androidxAppBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("androidx-app")

internal val VersionCatalog.androidxTestArchCoreBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("androidx-test-arch-core")

internal val VersionCatalog.androidxtestBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("androidxtest")

internal val VersionCatalog.androidxtestutilsBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("androidxtestutils")

internal val VersionCatalog.animationBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("animation")

internal val VersionCatalog.cameraBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("camera")

internal val VersionCatalog.composeLibsWithBomBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("composeLibsWithBom")

internal val VersionCatalog.composeLibsWithoutBomBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("composeLibsWithoutBom")

internal val VersionCatalog.composetestBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("composetest")

internal val VersionCatalog.coroutinesBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("coroutines")

internal val VersionCatalog.corutinestestBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("corutinestest")

internal val VersionCatalog.cryptoBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("crypto")

internal val VersionCatalog.cryptotestBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("cryptotest")

internal val VersionCatalog.databaseBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("database")

internal val VersionCatalog.datamatrixBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("datamatrix")

internal val VersionCatalog.datetimeBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("datetime")

internal val VersionCatalog.diBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("di")

internal val VersionCatalog.diKotlinBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("di-kotlin")

internal val VersionCatalog.diViewmodelBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("di-viewmodel")

internal val VersionCatalog.imageBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("image")

internal val VersionCatalog.kotlinBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("kotlin")

internal val VersionCatalog.kotlintestBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("kotlintest")

internal val VersionCatalog.lifecycleBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("lifecycle")

internal val VersionCatalog.loggingBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("logging")

internal val VersionCatalog.mapsBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("maps")

internal val VersionCatalog.mockandroidBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("mockandroid")

internal val VersionCatalog.networkBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("network")

internal val VersionCatalog.networktestBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("networktest")

internal val VersionCatalog.othersBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("others")

internal val VersionCatalog.pdfboxBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("pdfbox")

internal val VersionCatalog.playBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("play")

internal val VersionCatalog.processphoenixBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("processphoenix")

internal val VersionCatalog.qualityBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("quality")

internal val VersionCatalog.qualitydetektcomposerulesBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("qualitydetektcomposerules")

internal val VersionCatalog.serializationBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("serialization")

internal val VersionCatalog.testingBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("testing")

internal val VersionCatalog.testjunitBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("testjunit")

internal val VersionCatalog.trackingBundle: Provider<ExternalModuleDependencyBundle>
    get() = getBundle("tracking")

private fun VersionCatalog.getLibrary(library: String): Provider<MinimalExternalModuleDependency> = findLibrary(library).get()
private fun VersionCatalog.getBundle(bundle: String): Provider<ExternalModuleDependencyBundle> = findBundle(bundle).get()
