import java.time.LocalDateTime

plugins {
    `kotlin-dsl`
    `kotlin-dsl-precompiled-script-plugins`
    alias(libs.plugins.detekt)
}

group = "de.gematik.erp.app.scripts"
version = "1.0.0"

abstract class GenerateLibsObjectTask : DefaultTask() {

    @get:Input
    abstract val catalogName: Property<String>

    @get:OutputFile
    abstract val output: RegularFileProperty

    @TaskAction
    fun generate() {
        val catalog = project.extensions.getByType<VersionCatalogsExtension>()
            .named(catalogName.get())

        fun String.toCamelCase(): String {
            return split('.', '-', '_').joinToString("") { it.replaceFirstChar(Char::uppercaseChar) }
                .replaceFirstChar(Char::lowercaseChar)
        }

        val sb = StringBuilder()
        sb.appendLine()
        sb.appendLine("package generated")
        sb.appendLine()
        sb.appendLine("import org.gradle.api.provider.Provider")
        sb.appendLine("import org.gradle.api.artifacts.ExternalModuleDependencyBundle")
        sb.appendLine("import org.gradle.api.artifacts.MinimalExternalModuleDependency")
        sb.appendLine("import org.gradle.api.artifacts.VersionCatalog")
        sb.appendLine()
        sb.appendLine(
            """
    /**
     * This file is auto-generated by the Gradle task `./gradlew :scripts:generateLibsObject`.
     *
     * It provides strongly typed access to libraries and bundles defined in the
     * `libs.versions.toml` version catalog. This enables safe and convenient use of
     * dependencies in custom Gradle script plugins located in the `:scripts` module.
     *
     * Since Gradle precompiled script plugins in `buildSrc` or custom modules cannot
     * use `libs.` directly like in a `build.gradle.kts`, this file acts as a bridge,
     * exposing those references via Kotlin extension properties.
     *
     * Do NOT edit this file manually. Instead, rerun the Gradle task if you make
     * changes to `libs.versions.toml`.
     *
     * Generated on: ${LocalDateTime.now()}
     */
    """.trimIndent()
        )
        catalog.libraryAliases.forEach { alias ->
            val propertyName = alias.toCamelCase() + "Library"
            val resolvedAlias = alias.replace('.', '-')
            println("Libraries $resolvedAlias")
            sb.appendLine("internal val VersionCatalog.$propertyName: Provider<MinimalExternalModuleDependency>")
            sb.appendLine("    get() = getLibrary(\"$resolvedAlias\")")
            sb.appendLine()
        }

        catalog.bundleAliases.forEach { alias ->
            val propertyName = alias.toCamelCase() + "Bundle"
            val resolvedAlias = alias.replace('.', '-')
            println("Bundles $resolvedAlias")
            sb.appendLine("internal val VersionCatalog.$propertyName: Provider<ExternalModuleDependencyBundle>")
            sb.appendLine("    get() = getBundle(\"$resolvedAlias\")")
            sb.appendLine()
        }

        sb.appendLine("private fun VersionCatalog.getLibrary(library: String): Provider<MinimalExternalModuleDependency> = findLibrary(library).get()")
        sb.appendLine("private fun VersionCatalog.getBundle(bundle: String): Provider<ExternalModuleDependencyBundle>  = findBundle(bundle).get()")

        output.get().asFile.writeText(sb.toString())
    }
}

gradlePlugin {
    plugins {
        register("forcedDependencies") {
            id = "de.gematik.forced-dependencies"
            implementationClass = "plugins.ForcedDependenciesPlugin"
        }
    }
}

tasks.register<GenerateLibsObjectTask>("generateLibsObject") {
    catalogName.set("libs")
    output.set(layout.projectDirectory.file("src/main/kotlin/generated/Libs.kt"))
}

repositories {
    maven("https://oss.sonatype.org/content/repositories/snapshots/")
    maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
    google()
    gradlePluginPortal()
    mavenCentral()
}

dependencies {
    implementation(libs.android.gradle.plugin)
    implementation(libs.kotlin.gradle.plugin)
    implementation(libs.buildkonfig.gradle.plugin)
    implementation(libs.secrets.gradle.plugin)
    implementation(libs.dependency.check.gradle)
    implementation(libs.gradle.license.plugin)
    implementation(libs.database.realm.plugin)
    implementation(libs.compose.plugin)
    implementation(libs.kotlin.serilization.plugin)
    implementation(libs.quality.detekt)
}
